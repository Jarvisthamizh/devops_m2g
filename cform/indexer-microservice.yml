Description: >
    Master Template for Deployng SM Microservice

Parameters:

    Deploy:
        Description: What to deploy GREEN, BLUE, or BOTH (ES update is under construction)
        Type: String
        AllowedValues:
            - GREEN
            - BLUE
            - BOTH
            - ESONLY

    GreenImage:
        Description: Full name of the Contaner Image for GREEN Deployment
        Type: String
        Default: ''

    BlueImage:
        Description: Full name of the Contaner Image for BLUE Deployment
        Type: String
        Default: ''

    GreenPriority:
        Description: Priority of the GREEN ASG Listener Rule
        Type: Number
        Default: 0

    BluePriority:
        Description: Priority of the BLUE ASG Listener Rule
        Type: Number
        Default: 0

    GreenPath:
        Description: Path pattern of the GREEN URL
        Type: String
        Default: /

    BluePath:
        Description: Path pattern of the BLUE URL
        Type: String
        Default: /

    HomeVPC:
        Description: VPC in which microservice resources will be created. If empty a new one will be created.
        Type: String
        Default: ""

    Subnets:
        Description: two subnets in which microservice will operate
        Type: List<AWS::EC2::Subnet::Id>

    ImageID:
        Description: Basic AMI Image of the Microservice
        Type: String

    LoadBalancerSecurityGroup:
        Description: Security Group to use for Application Load Balancer
        Type: String

    ECSHostSecurityGroup:
        Description: Security Group to use for ECS Hosts
        Type: String

    ESServiceSecurityGroup:
        Description: Security Group to use ECS Service
        Type: String

    ServiceAccessSecurityGroup:
        Description: Security Group to use ECS Service
        Type: String

    ECSInstanceRole:
        Description: IAM Role for EC2 for Amazon EC2 Container Service
        Type: String
        Default: ecsInstanceRole

    ECSServiceRole:
        Description: IAM Role for running ECS Service
        Type: String
        Default: ecsServiceRoleCustom

    IndexerPort:
        Description: port to access Indexer ALB and beyond
        Type: String
        Default: 8084
    
    ElasticSearchStack:
        Description: Name of Elastic Search stack
        Type: String
        Default: SM-ElasticSearch-g1-usw1

    ECSHttpProxy:
        Description: ECS HTTP_PROXY
        Type: String
        Default: ""

    ECSNoProxy:
        Description: ECS NO_PROXY
        Type: String
        Default: ""
        
Conditions:

    DeployGreen: !Or
            - !Equals [ !Ref Deploy, "GREEN" ]
            - !Equals [ !Ref Deploy, "BOTH" ]

    DeployBlue: !Or
            - !Equals [ !Ref Deploy, "BLUE" ]
            - !Equals [ !Ref Deploy, "BOTH" ]

    DeployIndexer: !Not [!Equals [ !Ref Deploy, "ESONLY" ]]
    
Resources:

    # #--------------------------------------------------------------------------------------
    # # Security groups for a granular access control to and from tenant DMZ service
    # #--------------------------------------------------------------------------------------
    IndexerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: !Ref HomeVPC
            GroupName: Role-Shared-Internal-SM-Indexer
            GroupDescription: granular access control to and from tenant DMZ service
            SecurityGroupIngress:
                # Only allow inbound access to ECS from the ELB
                - SourceSecurityGroupId: !Ref ServiceAccessSecurityGroup
                  IpProtocol: tcp
                  FromPort: !Ref IndexerPort
                  ToPort: !Ref IndexerPort
                - SourceSecurityGroupId: !Ref ESServiceSecurityGroup
                  IpProtocol: tcp
                  FromPort: !Ref IndexerPort
                  ToPort: !Ref IndexerPort
            SecurityGroupEgress:
                # Only allow outbound access to ECS from the ELB
                - CidrIp: 0.0.0.0/0
                  IpProtocol: -1
                  FromPort: -1
                  ToPort: -1
            Tags: 
                - Key: Name
                  Value: g1-role-shared-internal-sm-indexer

    #--------------------------------------------------------------------------------------
    # Load Balancer and its suit
    #--------------------------------------------------------------------------------------
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Condition: DeployIndexer
        Properties:
            Name: !Ref AWS::StackName
            Subnets: !Ref Subnets
            Scheme: internal
            SecurityGroups: 
                - !Ref IndexerSecurityGroup
                - !Ref ServiceAccessSecurityGroup
                - !Ref ESServiceSecurityGroup
            Tags:
                - Key: Name
                  Value: !Ref AWS::StackName

    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Condition: DeployIndexer
        DependsOn:
            - LoadBalancer
        Properties:
            LoadBalancerArn: !Ref LoadBalancer
            Port: !Ref IndexerPort
            Protocol: HTTP
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref DefaultTargetGroup

    # We define a default target group here, as this is a mandatory Parameters
    # when creating an Application Load Balancer Listener. This is not used, instead
    # a target group is created per-service
    DefaultTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Condition: DeployIndexer
        Properties:
            Name: !Sub ${AWS::StackName}-P${IndexerPort}
            VpcId: !Ref HomeVPC
            Port: !Ref IndexerPort
            Protocol: HTTP

    #--------------------------------------------------------------------------------------
    # ECS Cluster
    #--------------------------------------------------------------------------------------
    ECSCluster:
        Type: AWS::ECS::Cluster
        Condition: DeployIndexer
        Properties:
            ClusterName: !Ref AWS::StackName

    #--------------------------------------------------------------------------------------
    # Green Heap
    #--------------------------------------------------------------------------------------

    # 1. Auto Scaling Group and its suite
    ECSAutoScalingGroupG:
        Type: AWS::AutoScaling::AutoScalingGroup
        Condition: DeployGreen
        DependsOn: ECSLaunchConfigurationG
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfigurationG
            MinSize: 2
            MaxSize: 100
            DesiredCapacity: 2
            HealthCheckType: ELB
            HealthCheckGracePeriod: '30'
            MetricsCollection:
                - Granularity: 1Minute
                  Metrics:
                    - GroupInServiceInstances
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} ECS host
                  PropagateAtLaunch: true
                - Key: Tenant ID
                  Value: '00-64'
                  PropagateAtLaunch: true
                - Key: Responsible Party
                  Value: 'Dan.Shaked@genesys.com'
                  PropagateAtLaunch: true
                - Key: NR_License
                  Value: 'a11f3c257b44348a85749b2fd92b9ca8fdb146ec'
                  PropagateAtLaunch: true

    ECSLaunchConfigurationG:
        Type: AWS::AutoScaling::LaunchConfiguration
        Condition: DeployGreen
        Properties:
            ImageId:  !Ref ImageID
            InstanceType: m4.xlarge
            SecurityGroups: 
                - !Ref IndexerSecurityGroup
                - !Ref ServiceAccessSecurityGroup
                - !Ref ESServiceSecurityGroup
            IamInstanceProfile: !Ref ECSInstanceRole
            KeyName: stage-voice
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/sh
                    echo "ECS_CLUSTER=${AWS::StackName}" >> /etc/ecs/ecs.config

    # echo "HTTP_PROXY=${ECSHttpProxy}" >> /etc/ecs/ecs.config
    # echo "NO_PROXY=${ECSNoProxy}" >> /etc/ecs/ecs.config

    # 2. Policies and Alarms
    ASGScaleUpPolicyG:
        Type: AWS::AutoScaling::ScalingPolicy
        Condition: DeployGreen
        Properties:
            AdjustmentType: ChangeInCapacity
            Cooldown: 5
            PolicyType: SimpleScaling
            ScalingAdjustment: 1
            AutoScalingGroupName: !Ref ECSAutoScalingGroupG

    ASGScaleDownPolicyG:
        Type: AWS::AutoScaling::ScalingPolicy
        Condition: DeployGreen
        Properties:
            AdjustmentType: ChangeInCapacity
            Cooldown: 5
            PolicyType: SimpleScaling
            ScalingAdjustment: -1
            AutoScalingGroupName: !Ref ECSAutoScalingGroupG

    ScalableTargetG:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        Condition: DeployGreen
        Properties:
            MaxCapacity: 100
            MinCapacity: 2
            ResourceId:
                Fn::Join:
                - "/"
                - - service
                  - !Ref AWS::StackName
                  - Fn::GetAtt:
                      - ServiceG
                      - Name
            RoleARN: arn:aws:iam::676689269748:role/ecsAutoscaleRole
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs
  
    ECSScaleUpPolicyG:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Condition: DeployGreen
        DependsOn: ScalableTargetG
        Properties:
          PolicyName: ECS-ScaleUpPolicy-GREEN
          PolicyType: StepScaling
          ResourceId:
            Fn::Join:
            - "/"
            - - service
              - Ref: AWS::StackName
              - Fn::GetAtt:
                - ServiceG
                - Name
          ScalableDimension: ecs:service:DesiredCount
          ServiceNamespace: ecs
          StepScalingPolicyConfiguration:
            AdjustmentType: ChangeInCapacity
            StepAdjustments:
                - MetricIntervalLowerBound: 0.0
                  ScalingAdjustment: 1
            Cooldown: 5
            MetricAggregationType: Average

    ECSScaleDownPolicyG:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Condition: DeployGreen
        DependsOn: ScalableTargetG
        Properties:
          PolicyName: ECS-ScaleDownPolicy-GREEN
          PolicyType: StepScaling
          ResourceId:
            Fn::Join:
            - "/"
            - - service
              - Ref: AWS::StackName
              - Fn::GetAtt:
                - ServiceG
                - Name
          ScalableDimension: ecs:service:DesiredCount
          ServiceNamespace: ecs
          StepScalingPolicyConfiguration:
            AdjustmentType: ChangeInCapacity
            StepAdjustments:
                - MetricIntervalUpperBound: 0.0
                  ScalingAdjustment: -1
            Cooldown: 5
            MetricAggregationType: Average
            
    CPUHighAlarmG:
        Type: AWS::CloudWatch::Alarm
        Condition: DeployGreen
        DependsOn:
            - ASGScaleUpPolicyG
            - ECSScaleUpPolicyG
        Properties:
            ActionsEnabled: true
            ComparisonOperator: GreaterThanOrEqualToThreshold
            EvaluationPeriods: 10
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Period: 60
            Statistic: Average
            Threshold: 75.0
            AlarmActions:
                - !Ref ASGScaleUpPolicyG
                - !Ref ECSScaleUpPolicyG
            Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref ECSAutoScalingGroupG

    CPULowAlarmG:
        Type: AWS::CloudWatch::Alarm
        Condition: DeployGreen
        DependsOn:
            - ASGScaleDownPolicyG
            - ECSScaleDownPolicyG
        Properties:
            ActionsEnabled: true
            ComparisonOperator: LessThanOrEqualToThreshold
            EvaluationPeriods: 15
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Period: 60
            Statistic: Average
            Threshold: 30.0
            AlarmActions:
                - !Ref ASGScaleDownPolicyG
                - !Ref ECSScaleDownPolicyG
            Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref ECSAutoScalingGroupG

    # NINHighAlarmG:
        # Type: AWS::CloudWatch::Alarm
        # Condition: DeployGreen
        # Properties:
            # ActionsEnabled: true
            # ComparisonOperator: GreaterThanOrEqualToThreshold
            # EvaluationPeriods: 1
            # MetricName: NetworkIn
            # Namespace: AWS/EC2
            # Period: 60
            # Statistic: Average
            # Threshold: 15000000000
            # AlarmActions:
                # - !Ref ASGScaleUpPolicyG
                # - !Ref ECSScaleUpPolicyG
            # Dimensions:
                # - Name: AutoScalingGroupName
                  # Value: !Ref ECSAutoScalingGroupG

    # NINLowAlarmG:
        # Type: AWS::CloudWatch::Alarm
        # Condition: DeployGreen
        # Properties:
            # ActionsEnabled: true
            # ComparisonOperator: LessThanOrEqualToThreshold
            # EvaluationPeriods: 1
            # MetricName: NetworkIn
            # Namespace: AWS/EC2
            # Period: 60
            # Statistic: Average
            # Threshold: 40000000
            # AlarmActions:
                # - !Ref ASGScaleDownPolicyG
                # - !Ref ECSScaleDownPolicyG
            # Dimensions:
                # - Name: AutoScalingGroupName
                  # Value: !Ref ECSAutoScalingGroupG

    # 3. ECS Service and its suite (including Task Definition)
    ServiceG:
        Type: AWS::ECS::Service
        DependsOn: 
            - ListenerRuleG
            - TaskDefinitionG
        Condition: DeployGreen
        Properties:
            Cluster: !Ref ECSCluster
            Role: !Ref ECSServiceRole
            DesiredCount: 2
            TaskDefinition: !Ref TaskDefinitionG
            PlacementStrategies :
                - Type: random
            LoadBalancers:
                - ContainerName: !Sub ${AWS::StackName}-microservice
                  ContainerPort: 5000
                  TargetGroupArn: !Ref TargetGroupG

    TaskDefinitionG:
        Type: AWS::ECS::TaskDefinition
        Condition: DeployGreen
        Properties:
            Family: !Sub ${AWS::StackName}-microservice
            ContainerDefinitions:
                - Name:  !Sub ${AWS::StackName}-microservice
                  Essential: true
                  Image: !Ref GreenImage
                  Memory: 8000
                  Cpu: 4096
                  PortMappings:
                    - ContainerPort: 5000
                      HostPort: !Ref IndexerPort
                      Protocol: tcp
                  Environment:
                    - Name: esNodes
                      Value: 
                        Fn::ImportValue:
                            !Sub "${ElasticSearchStack}-URL"
                    - Name: "Serilog:WriteTo:0:Args:path"
                      Value: /mnt/log/indexer/Indexer-
                    - Name: indexAuth
                      Value: THimh3iJtDcugByxPK6zdw==
                    - Name: "Serilog:MinimumLevel"
                      Value: Debug
                  MountPoints:
                    - SourceVolume: logs
                      ContainerPath: "/mnt/log/indexer"
            Volumes:
                - Host:
                    SourcePath: /mnt/log/indexer
                  Name: logs

    TargetGroupG:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Condition: DeployGreen
        DependsOn: LoadBalancer
        Properties:
            VpcId: !Ref HomeVPC
            Port: !Ref IndexerPort
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /api/v1/status/instance
            HealthCheckPort: !Ref IndexerPort
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 20
            HealthyThresholdCount: 2
            Tags:
                - Key: Color
                  Value: GREEN
                - Key: Image
                  Value: !Ref GreenImage

    ListenerRuleG:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Condition: DeployGreen
        DependsOn:
            - LoadBalancerListener
            - TargetGroupG
        Properties:
            ListenerArn: !Ref LoadBalancerListener
            Priority: !Ref GreenPriority
            Conditions:
                - Field: path-pattern
                  Values:
                    - !Ref GreenPath
            Actions:
                - TargetGroupArn: !Ref TargetGroupG
                  Type: forward

    #--------------------------------------------------------------------------------------
    # Blue Heap
    #--------------------------------------------------------------------------------------

    # 1. Auto Scaling Group and its suite
    ECSAutoScalingGroupB:
        Type: AWS::AutoScaling::AutoScalingGroup
        Condition: DeployBlue
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfigurationB
            MinSize: 2
            MaxSize: 100
            DesiredCapacity: 2
            HealthCheckType: ELB
            HealthCheckGracePeriod: '30'
            MetricsCollection:
                - Granularity: 1Minute
                  Metrics:
                    - GroupInServiceInstances
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} ECS host
                  PropagateAtLaunch: true
                - Key: Tenant ID
                  Value: '00-64'
                  PropagateAtLaunch: true
                - Key: Responsible Party
                  Value: 'Dan.Shaked@genesys.com'
                  PropagateAtLaunch: true
                - Key: NR_License
                  Value: 'a11f3c257b44348a85749b2fd92b9ca8fdb146ec'
                  PropagateAtLaunch: true

    ECSLaunchConfigurationB:
        Type: AWS::AutoScaling::LaunchConfiguration
        Condition: DeployBlue
        Properties:
            ImageId:  !Ref ImageID
            InstanceType: m4.xlarge
            SecurityGroups: 
                - !Ref IndexerSecurityGroup
                - !Ref ServiceAccessSecurityGroup
                - !Ref ESServiceSecurityGroup
            IamInstanceProfile: !Ref ECSInstanceRole
            KeyName: stage-voice
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/sh
                    echo "ECS_CLUSTER=${AWS::StackName}" >> /etc/ecs/ecs.config


    # echo "HTTP_PROXY=${ECSHttpProxy}" >> /etc/ecs/ecs.config
    # echo "NO_PROXY=${ECSNoProxy}" >> /etc/ecs/ecs.config

    # 2. Policies and Alarms
    ASGScaleUpPolicyB:
        Type: AWS::AutoScaling::ScalingPolicy
        Condition: DeployBlue
        Properties:
            AdjustmentType: ChangeInCapacity
            Cooldown: 5
            PolicyType: SimpleScaling
            ScalingAdjustment: 1
            AutoScalingGroupName: !Ref ECSAutoScalingGroupB

    ASGScaleDownPolicyB:
        Type: AWS::AutoScaling::ScalingPolicy
        Condition: DeployBlue
        Properties:
            AdjustmentType: ChangeInCapacity
            Cooldown: 5
            PolicyType: SimpleScaling
            ScalingAdjustment: -1
            AutoScalingGroupName: !Ref ECSAutoScalingGroupB

    ScalableTargetB:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        Condition: DeployBlue
        Properties:
            MaxCapacity: 100
            MinCapacity: 2
            ResourceId:
                Fn::Join:
                - "/"
                - - service
                  - !Ref AWS::StackName
                  - Fn::GetAtt:
                      - ServiceB
                      - Name
            RoleARN: arn:aws:iam::676689269748:role/ecsAutoscaleRole
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ECSScaleUpPolicyB:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Condition: DeployBlue
        DependsOn: ScalableTargetB
        Properties:
          PolicyName: ECS-ScaleUpPolicy-BLUE
          PolicyType: StepScaling
          ResourceId:
            Fn::Join:
            - "/"
            - - service
              - Ref: AWS::StackName
              - Fn::GetAtt:
                - ServiceB
                - Name
          ScalableDimension: ecs:service:DesiredCount
          ServiceNamespace: ecs
          StepScalingPolicyConfiguration:
            AdjustmentType: ChangeInCapacity
            StepAdjustments:
                - MetricIntervalLowerBound: 0.0
                  ScalingAdjustment: 1
            Cooldown: 5
            MetricAggregationType: Average

    ECSScaleDownPolicyB:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Condition: DeployBlue
        DependsOn: ScalableTargetB
        Properties:
          PolicyName: ECS-ScaleDownPolicy-BLUE
          PolicyType: StepScaling
          ResourceId:
            Fn::Join:
            - "/"
            - - service
              - Ref: AWS::StackName
              - Fn::GetAtt:
                - ServiceB
                - Name
          ScalableDimension: ecs:service:DesiredCount
          ServiceNamespace: ecs
          StepScalingPolicyConfiguration:
            AdjustmentType: ChangeInCapacity
            StepAdjustments:
                - MetricIntervalUpperBound: 0.0
                  ScalingAdjustment: -1
            Cooldown: 5
            MetricAggregationType: Average
            
            
    CPUHighAlarmB:
        Type: AWS::CloudWatch::Alarm
        Condition: DeployBlue
        DependsOn:
            - ASGScaleUpPolicyB
            - ECSScaleUpPolicyB
        Properties:
            ActionsEnabled: true
            ComparisonOperator: GreaterThanOrEqualToThreshold
            EvaluationPeriods: 10
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Period: 60
            Statistic: Average
            Threshold: 75.0
            AlarmActions:
                - !Ref ASGScaleUpPolicyB
                - !Ref ECSScaleUpPolicyB
            Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref ECSAutoScalingGroupB

    CPULowAlarmB:
        Type: AWS::CloudWatch::Alarm
        Condition: DeployBlue
        DependsOn:
            - ASGScaleDownPolicyB
            - ECSScaleDownPolicyB
        Properties:
            ActionsEnabled: true
            ComparisonOperator: LessThanOrEqualToThreshold
            EvaluationPeriods: 15
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Period: 60
            Statistic: Average
            Threshold: 30.0
            AlarmActions:
                - !Ref ASGScaleDownPolicyB
                - !Ref ECSScaleDownPolicyB  
            Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref ECSAutoScalingGroupB

    # NINHighAlarmB:
        # Type: AWS::CloudWatch::Alarm
        # Condition: DeployBlue
        # Properties:
            # ActionsEnabled: true
            # ComparisonOperator: GreaterThanOrEqualToThreshold
            # EvaluationPeriods: 1
            # MetricName: NetworkIn
            # Namespace: AWS/EC2
            # Period: 60
            # Statistic: Average
            # Threshold: 150000000
            # AlarmActions:
                # - !Ref ASGScaleUpPolicyB
                # - !Ref ECSScaleUpPolicyB
            # Dimensions:
                # - Name: AutoScalingGroupName
                  # Value: !Ref ECSAutoScalingGroupB

    # NINLowAlarmB:
        # Type: AWS::CloudWatch::Alarm
        # Condition: DeployBlue
        # Properties:
            # ActionsEnabled: true
            # ComparisonOperator: LessThanOrEqualToThreshold
            # EvaluationPeriods: 1
            # MetricName: NetworkIn
            # Namespace: AWS/EC2
            # Period: 60
            # Statistic: Average
            # Threshold: 40000000
            # AlarmActions:
                # - !Ref ASGScaleDownPolicyB
                # - !Ref ECSScaleDownPolicyB
            # Dimensions:
                # - Name: AutoScalingGroupName
                  # Value: !Ref ECSAutoScalingGroupB
                  
    # 3. ECS Service and its suite (including Task Definition)
    ServiceB:
        Type: AWS::ECS::Service
        DependsOn: 
            - ListenerRuleB
            - TaskDefinitionB
        Condition: DeployBlue
        Properties:
            Cluster: !Ref ECSCluster
            Role: !Ref ECSServiceRole
            DesiredCount: 2
            TaskDefinition: !Ref TaskDefinitionB
            PlacementStrategies :
                - Type: random
            LoadBalancers:
                - ContainerName: !Sub ${AWS::StackName}-microservice
                  ContainerPort: 5000
                  TargetGroupArn: !Ref TargetGroupB

    TaskDefinitionB:
        Type: AWS::ECS::TaskDefinition
        Condition: DeployBlue
        Properties:
            Family: !Sub ${AWS::StackName}-microservice
            ContainerDefinitions:
                - Name:  !Sub ${AWS::StackName}-microservice
                  Essential: true
                  Image: !Ref BlueImage
                  Memory: 8000
                  Cpu: 4096
                  PortMappings:
                    - ContainerPort: 5000
                      HostPort: !Ref IndexerPort
                      Protocol: tcp
                  Environment:
                    - Name: esNodes
                      Value: 
                        Fn::ImportValue:
                            !Sub "${ElasticSearchStack}-URL"
                    - Name: "Serilog:WriteTo:0:Args:path"
                      Value: /mnt/log/indexer/Indexer-
                    - Name: indexAuth
                      Value: THimh3iJtDcugByxPK6zdw==
                    - Name: "Serilog:MinimumLevel"
                      Value: Debug
                  MountPoints:
                    - SourceVolume: logs
                      ContainerPath: "/mnt/log/indexer"
            Volumes:
                - Host:
                    SourcePath: /mnt/log/indexer
                  Name: logs

    TargetGroupB:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Condition: DeployBlue
        DependsOn: LoadBalancer
        Properties:
            VpcId: !Ref HomeVPC
            Port: !Ref IndexerPort
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /api/v1/status/instance
            HealthCheckPort: !Ref IndexerPort
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 20
            HealthyThresholdCount: 2
            Tags:
                - Key: Color
                  Value: BLUE
                - Key: Image
                  Value: !Ref BlueImage

    ListenerRuleB:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Condition: DeployBlue
        DependsOn:
            - LoadBalancerListener
            - TargetGroupB
        Properties:
            ListenerArn: !Ref LoadBalancerListener
            Priority: !Ref BluePriority
            Conditions:
                - Field: path-pattern
                  Values:
                    - !Ref BluePath
            Actions:
                - TargetGroupArn: !Ref TargetGroupB
                  Type: forward

Outputs:

    MicroserviceUrl:
        Description: The URL endpoint for the microservice
        Value: !GetAtt LoadBalancer.DNSName
        Condition: DeployIndexer
