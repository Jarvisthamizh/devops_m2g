Description: >
    Master Template for Deployng SM Microservice 
    
Parameters:
    
    Deploy:
        Description: What to deploy GREEN, BLUE, or BOTH (ES update is under construction)
        Type: String
        AllowedValues: 
            - GREEN
            - BLUE
            - BOTH
            - ES

    GreenImage:
        Description: Full name of the Contaner Image for GREEN Deployment
        Type: String
        Default: ''
        
    BlueImage:
        Description: Full name of the Contaner Image for BLUE Deployment
        Type: String
        Default: ''

    GreenPriority:
        Description: Priority of the GREEN ASG Listener Rule
        Type: Number
        Default: 0
        
    BluePriority:
        Description: Priority of the BLUE ASG Listener Rule
        Type: Number
        Default: 0

    GreenPath:
        Description: Path pattern of the GREEN URL
        Type: String
        Default: /
        
    BluePath:
        Description: Path pattern of the BLUE URL
        Type: String
        Default: /
        
    HomeVPC:
        Description: VPC in which microservice resources will be created. If empty a new one will be created.
        Type: String
        Default: ""

    PeerVPC:
        Description: Peer VPC that will communicate with microservice. If not empty, 'Peering VPC Connection' reseorce will be created in HomeVPC
        Type: String
        Default: ""

    CIDR1:
        Description: CIDR of the first Private Subnet
        Type: String
        Default: 10.50.40.0/22

    CIDR2:
        Description: CIDR of the second Private Subnet1
        Type: String
        Default: 10.50.44.0/22

Conditions:

    DeployGreen: !Or
        - !Equals [ !Ref Deploy, "GREEN" ]
        - !Equals [ !Ref Deploy, "BOTH" ]
        
    DeployBlue: !Or
        - !Equals [ !Ref Deploy, "BLUE" ]
        - !Equals [ !Ref Deploy, "BOTH" ]
        
    DeployES: !Equals [ !Ref Deploy, "ES" ]

    CreateVPC: !Equals [ !Ref HomeVPC, "" ]
    
Resources:

    VPC:
        Type: AWS::CloudFormation::Stack
        Condition: CreateVPC
        Properties:
            TemplateURL: !Sub 'https://s3-${AWS::Region}.amazonaws.com/sm-msi-s3/cfn/infra/vpc.yml'
            Parameters:
                MicroserviceName:   !Ref AWS::StackName
                VpcCIDR:            10.50.32.0/19
                PublicSubnet1CIDR:  10.50.32.0/22
                PublicSubnet2CIDR:  10.50.36.0/22
                PrivateSubnet1CIDR: !Ref CIDR1
                PrivateSubnet2CIDR: !Ref CIDR2
                PeerVPC:            !Ref PeerVPC

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3-${AWS::Region}.amazonaws.com/sm-msi-s3/cfn/infra/security-groups.yml'
            Parameters: 
                MicroserviceName: !Ref AWS::StackName
                VPC: !If [ CreateVPC, !GetAtt VPC.Outputs.VPC, !Ref HomeVPC ]

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL:  !Sub 'https://s3-${AWS::Region}.amazonaws.com/sm-msi-s3/cfn/infra/load-balancers.yml'
            Parameters:
                MicroserviceName: !Ref AWS::StackName
                VPC: !If [ CreateVPC, !GetAtt VPC.Outputs.VPC, !Ref HomeVPC ]
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

    ElasticSearch:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL:  !Sub 'https://s3-${AWS::Region}.amazonaws.com/sm-msi-s3/cfn/es/es-domain.yml'
            Parameters:
                MicroserviceName: !Ref AWS::StackName
                ElasticsearchVersion: '6.0'
                InstanceType: m4.large.elasticsearch
                Subnet1: !GetAtt VPC.Outputs.PrivateSubnet1
                Subnet2: !GetAtt VPC.Outputs.PrivateSubnet2
                SecurityGroup: !GetAtt SecurityGroups.Outputs.ESServiceSecurityGroup
                CIDR1: !Ref CIDR1
                CIDR2: !Ref CIDR2

    ECS:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub 'https://s3-${AWS::Region}.amazonaws.com/sm-msi-s3/cfn/ecs/cluster.yml'
            Parameters:
                MicroserviceName: !Ref AWS::StackName

    GreenHeap:
        Type: AWS::CloudFormation::Stack
        Condition: DeployGreen
        Properties:
            TemplateURL: !Sub 'https://s3-${AWS::Region}.amazonaws.com/sm-msi-s3/cfn/ecs/heap.yml'
            Parameters:
                MicroserviceName: !Ref AWS::StackName
                InstanceType: m4.large
                ClusterSize: 1
                MaxClusterSize: 100
                VPC: !If [ CreateVPC, !GetAtt VPC.Outputs.VPC, !Ref HomeVPC ]
                SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                Cluster: !GetAtt ECS.Outputs.Cluster
                DesiredCount: 1
                Listener: !GetAtt ALB.Outputs.Listener 
                Path: !Ref GreenPath
                Image: !Ref GreenImage
                Color: GREEN
                Priority: !Ref GreenPriority

    
    BlueHeap:
        Type: AWS::CloudFormation::Stack
        Condition: DeployBlue
        Properties:
            TemplateURL: !Sub 'https://s3-${AWS::Region}.amazonaws.com/sm-msi-s3/cfn/ecs/heap.yml'
            Parameters:
                MicroserviceName: !Ref AWS::StackName
                InstanceType: m4.large
                ClusterSize: 1
                MaxClusterSize: 100
                VPC: !If [ CreateVPC, !GetAtt VPC.Outputs.VPC, !Ref HomeVPC ]
                SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                Cluster: !GetAtt ECS.Outputs.Cluster
                DesiredCount: 1
                Listener: !GetAtt ALB.Outputs.Listener 
                Path: !Ref BluePath
                Image: !Ref BlueImage
                Color: BLUE
                Priority: !Ref BluePriority

Outputs:

    MicroserviceUrl: 
        Description: The URL endpoint for the microservice
        Value: !GetAtt ALB.Outputs.LoadBalancerUrl
