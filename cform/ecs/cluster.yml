Description: >
    This template deploys an ECS cluster to the provided VPC and subnets 
    using an Auto Scaling Group
Parameters:

    MicroserviceName:
        Description: A microservice name that will be prefixed to resource names
        Type: String

    InstanceType: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: m4.large

    ClusterSize:
        Description: How many MS Replicas do you want to initially deploy?
        Type: Number
        Default: 1

    MaxClusterSize:
        Description: Maximum nuber of MS Replicas allowed
        Type: Number
        Default: 10

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

Mappings:

    #-----------------------------------------------------------------------------
    # Last Update: December 2017
    #-----------------------------------------------------------------------------
    #
    #   amzn-ami-2017.09.d-amazon-ecs-optimized
    #   ECS agent:    1.16.0
    #   Docker:       17.06.2-ce
    #   ecs-init:     1.16.0-1
    #
    #-----------------------------------------------------------------------------
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    #-----------------------------------------------------------------------------

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-58f5db3d
        us-east-1:
            AMI: ami-fad25980
        us-west-2:
            AMI: ami-7114c909
        us-west-1:
            AMI: ami-62e0d802
        eu-west-2:
            AMI: ami-dbfee1bf	
        eu-west-1:
            AMI: ami-4cbe0935	
        eu-central-1:
            AMI: ami-05991b6a
        ap-northeast-2:
            AMI: ami-7267c01c
        ap-northeast-1:
            AMI: ami-56bd0030	
        ap-southeast-2:
            AMI: ami-14b55f76
        ap-southeast-1:
            AMI: ami-1bdc8b78
        ca-central-1:
            AMI: ami-918b30f5	

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref MicroserviceName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref ClusterSize
            MaxSize: !Ref MaxClusterSize
            DesiredCapacity: !Ref ClusterSize
            Tags: 
                - Key: Name
                  Value: !Sub ${MicroserviceName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal: 
                Timeout: PT20M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: !Ref ClusterSize
                MaxBatchSize: !Ref MaxClusterSize
                PauseTime: PT10M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true
        
    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            SecurityGroups: 
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            UserData: 
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
        Metadata:
            AWS::CloudFormation::Init:
                config:
                    commands:
                        01_add_instance_to_cluster:
                            command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}
                        
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    services: 
                        sysvinit:
                            cfn-hup: 
                                enabled: true
                                ensureRunning: true
                                files: 
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${MicroserviceName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken"
                            ],
                            "Resource": "*"
                        }]
                    }
                    
    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole

    ScaleUpPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            Cooldown: 30
            PolicyType: SimpleScaling
            ScalingAdjustment: 1
            AutoScalingGroupName:
                Ref: ECSAutoScalingGroup
                
    ScaleDownPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            Cooldown: 30
            PolicyType: SimpleScaling
            ScalingAdjustment: -1
            AutoScalingGroupName:
                Ref: ECSAutoScalingGroup

    CPUHighAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            ActionsEnabled: true
            ComparisonOperator: GreaterThanOrEqualToThreshold
            EvaluationPeriods: 1
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Period: 60
            Statistic: Average
            Threshold: 90.0
            AlarmActions:
                - !Ref ScaleUpPolicy
            Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref ECSAutoScalingGroup
        
    CPULowAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            ActionsEnabled: true
            ComparisonOperator: LessThanOrEqualToThreshold
            EvaluationPeriods: 1
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Period: 60
            Statistic: Average
            Threshold: 10.0
            AlarmActions:
                - !Ref ScaleDownPolicy
            Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref ECSAutoScalingGroup

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster