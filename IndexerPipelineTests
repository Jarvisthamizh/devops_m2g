// --------------------------------------
//
// global reusable definitions
//
// --------------------------------------

// Define build variables

def major_version_number				= "1.0.1"

//def indexerProjPaths					= ["%WORKSPACE%\\Indexer\\bin\\release\\PublishOutputpublish", "%WORKSPACE%\\Indexer\\bin\\release\\PublishOutput"]
//def indexerUnitTestProjPaths			= ["%WORKSPACE%\\IndexerUnitTest\\bin\\release\\PublishOutputpublish", "%WORKSPACE%\\IndexerUnitTest\\bin\\release\\PublishOutput"]
//def indexerFullTestProjPaths			= ["%WORKSPACE%\\IndexerFullTest\\bin\\release\\PublishOutputpublish", "%WORKSPACE%\\IndexerFullTest\\bin\\release\\PublishOutput"]
//def indexerConfigHostProjPaths		= ["%WORKSPACE%\\ConfigIndexerHost\\bin\\release\\PublishOutputpublish", "%WORKSPACE%\\ConfigIndexerHost\\bin\\release\\PublishOutput"]

def build_user							= "utopy_build"
def indexerTestProjDirs					= ['%WORKSPACE%\\IndexerUnitTest', '%WORKSPACE%\\IndexerFullTest']
def indexerPublishOutputDir				= "${indexerTestProjDirs[0]}\\bin\\Release\\PublishOutput"

def indexerArtifactsFolder				= ["X:\\software\\Microservices\\Indexer\\akabesatest\\Build-%BUILD_NUMBER%", "X:\\software\\Microservices\\Indexer\\akabesatest\\Build-%BUILD_NUMBER%\\PublishOutput","X:\\software\\Microservices\\Indexer\\akabesatest\\last-build"]
def installer_name						= "Indexer-1.0.0.0-Installer.exe"
def indexerInstallerPath				= "%WORKSPACE%\\Installer\\$installer_name"

def docker_file_path					= "${env.WORKSPACE}\\Indexer\\Dockerfile"
def docker_registry_tag					= "tlv-docker.us.int.genesyslab.com:5000/indexertest:${env.BUILD_NUMBER}"

// Define tests variables

def unittest_indexer_outfile   	    	= "unittest_indexer_out.xml"
def fulltest_indexer_outfile   	    	= "fulltest_indexer_out.xml"

def unittest_indexer_opencover_results  = '${indexerTestProjDirs[0]}\\unittest_opencover_results.xml'
def fulltest_indexer_opencover_results  = '${indexerTestProjDirs[1]}\\fulltest_opencover_results.xml'

def unittest_cobertura_outfile			= "indexerTestProjDirs[0]\\cobertura_results.xml"
def fulltest_cobertura_outfile			= "indexerTestProjDirs[1]\\cobertura_results.xml"

// Define one-liner-scripts

def msbuild          					= { configuration -> bat "\"${tool 'msbuildWinWorker2'}\" Indexer.sln /m /p:Configuration=$configuration /t:rebuild /p:Platform=\"Any CPU\" /p:OutputPath=bin\\$configuration\\netcoreapp2.0 /p:Version=$major_version_number.${env.BUILD_NUMBER}" }
def restore								= { -> bat "\"${tool 'msbuildWinWorker2'}\" Indexer.sln /m /t:restore"}
def publish								= { configuration -> bat "\"${tool 'msbuildWinWorker2'}\" Indexer.sln /m /p:Configuration=$configuration /t:publish /p:Platform=\"Any CPU\" /p:PublishDir=bin\\$configuration\\PublishOutput /p:Version=$major_version_number.${env.BUILD_NUMBER}"}

def copyPublishFiles					= { sourcepath,destpath -> bat "xcopy /y /v /e $sourcepath $destpath"}
def rmdirPublishFolders					= { path -> bat "rmdir /q /s $path"}

def openCoverWithXunit					= { project_name,outfile,opencover_results_file -> bat "c:\\Users\\utopy_build\\.nuget\\packages\\opencover\\4.6.519\\tools\\OpenCover.Console.exe -register:$build_user -target:dotnet.exe -targetdir:$project_name -targetargs:\"xunit -fxversion 2.0.3 -nobuild -xml $outfile -configuration \"debug\"\" -returntargetcode -oldStyle -output:$opencover_results_file " }

def openCoverToCobertura				= { opencover_results_file,cobertura_outfile -> bat "c:\\Users\\utopy_build\\.nuget\\packages\\OpenCoverToCoberturaConverter\\0.2.6\\tools\\OpenCoverToCoberturaConverter.exe -input:$opencover_results_file -output:$cobertura_outfile "} 


def indexerUnitTest_openCover			= { -> bat "c:\\Users\\utopy_build\\.nuget\\packages\\opencover\\4.6.519\\tools\\OpenCover.Console.exe -register:utopy_build  -target:dotnet.exe -targetdir:%WORKSPACE%\\IndexerUnitTest -targetargs:\"xunit -fxversion 2.0.3 -nobuild -xml \"unittest_indexer_out.xml\" -configuration \"debug\"\" -returntargetcode -oldStyle   -output:%WORKSPACE%\\IndexerUnitTest\\opencover_results.xml" }
def indexerFullTest_openCover			= { -> bat "c:\\Users\\utopy_build\\.nuget\\packages\\opencover\\4.6.519\\tools\\OpenCover.Console.exe -register:utopy_build  -target:dotnet.exe -targetdir:%WORKSPACE%\\IndexerFullTest -targetargs:\"xunit -fxversion 2.0.3 -nobuild -xml \"fulltest_indexer_out.xml\" -configuration \"debug\"\" -returntargetcode -oldStyle   -output:%WORKSPACE%\\IndexerFullTest\\opencover_results.xml" }

def indexerUnitTest_openCoverToCobertura= { -> bat "c:\\Users\\utopy_build\\.nuget\\packages\\OpenCoverToCoberturaConverter\\0.2.6\\tools\\OpenCoverToCoberturaConverter.exe -input:%WORKSPACE%\\IndexerUnitTest\\opencover_results.xml -output:%WORKSPACE%\\IndexerUnitTest\\cobertura_results.xml"}
def indexerFullTest_openCoverToCobertura= { -> bat "c:\\Users\\utopy_build\\.nuget\\packages\\OpenCoverToCoberturaConverter\\0.2.6\\tools\\OpenCoverToCoberturaConverter.exe -input:%WORKSPACE%\\IndexerFullTest\\opencover_results.xml -output:%WORKSPACE%\\IndexerFullTest\\cobertura_results.xml"}

// Define Jenkins environment related variables

linux_not_within_docker_node_label    	= 'linux-node-not-within-docker'
linux_not_within_docker_node_name     	= linux_not_within_docker_node_label
publish_artifacts_stash_id          	= 'publish-artifacts'
dockerfile_artifacts_stash_id			= 'dockerfile-artifacts'



/*
--------------------------------------

			the pipeline 

--------------------------------------
*/

pipeline { 
  agent {
    node {
      label 'builder-WN2012R2-1'
    }
  }
  
  options {
    skipDefaultCheckout true
    timeout(time: 30, unit: 'MINUTES') 
    timestamps()
  }
  
  triggers { pollSCM('*/1 * * * *') }
  
  stages { 
    stage('clean workspace') {
      steps {
        step([$class: 'WsCleanup'])
      }
    }
    stage('clone repo') {
      steps {
        checkout scm
      }
    }
    stage('restore-packages') { 
       steps {
		script {
		  restore()
		  }
		}
    }
	stage('build-debug') {
	  steps {
	    script {
		  msbuild "debug"
		  //bat "echo $indexerTestProjDirs[0]" - printed  [c:\jenkins\workspace\IndexerPipelineTests@2\IndexerUnitTest, c:\jenkins\workspace\IndexerPipelineTests@2\IndexerFullTest][0]
		  //bat "echo indexerTestProjDirs[0]" - printed indexerTestProjDirs[0]
		  bat "echo ${indexerTestProjDirs[0]}"
		  //printed c:\jenkins\workspace\IndexerPipelineTests@2\IndexerUnitTest
		}
	  }	  
	}
    stage('run-unit-tests-and-code-coverage') {
      steps {
        script {
          //indexerUnitTest_openCover()
		  openCoverWithXunit(indexerTestProjDirs[0],$unittest_indexer_outfile,$unittest_indexer_opencover_results)
		  //indexerUnitTest_openCoverToCobertura()
		  openCoverToCobertura($unittest_indexer_opencover_results,$unittest_cobertura_outfile)
        }
      }
    }
	stage('run-full-tests-and-code-coverage') {
      steps {
        script {
          //indexerFullTest_openCover()
		  openCoverWithXunit(indexerTestProjDirs[1],$fulltest_indexer_outfile,$fulltest_indexer_opencover_results)
		  //indexerFullTest_openCoverToCobertura()
		  openCoverToCobertura($fulltest_indexer_opencover_results,$fulltest_cobertura_outfile)
        }
      }
    }
	stage('publish') {
	  steps {
	    script {
		  publish "release"
		}
	  }	  
	}
	/*
	stage('copy-publish-files-of-indexer') {
	  steps {
		script {
		   copyPublishFiles(indexerProjPaths[0],indexerProjPaths[1])
		   copyPublishFiles(indexerUnitTestProjPaths[0],indexerUnitTestProjPaths[1])
		   copyPublishFiles(indexerFullTestProjPaths[0],indexerFullTestProjPaths[1])
		   copyPublishFiles(indexerConfigHostProjPaths[0],indexerConfigHostProjPaths[1])
		}
	  }	  
	}
	stage('delete-extra-publish-dir-in-workspace') {
	  steps {
	    script {
		  delPublishFiles(indexerProjPaths[0]) 
		  delPublishFiles(indexerUnitTestProjPaths[0])
		  delPublishFiles(indexerFullTestProjPaths[0])
		  delPublishFiles(indexerConfigHostProjPaths[0])
		  rmdirPublishFolders(indexerProjPaths[0]) 
		  rmdirPublishFolders(indexerUnitTestProjPaths[0]) 
		  rmdirPublishFolders(indexerFullTestProjPaths[0])
		  rmdirPublishFolders(indexerConfigHostProjPaths[0]) 
		}
	  }	  
	}
	*/
	stage('create-indexer-installer') {
	  steps {
		bat "\"C:\\Program Files (x86)\\NSIS\\makensis.exe\" ${env.WORKSPACE}\\Installer\\indexerInstallerScript.nsi"
	  }	  
	}
	stage('move-installer-to-x:') {
	  steps {
	    bat "mkdir ${indexerArtifactsFolder[0]}"
	    //bat "copy \"%WORKSPACE%\\Installer\\$installer_name\" ${indexerArtifactsFolder[0]}"
		script {copyPublishFiles($indexerInstallerPath, ${indexerArtifactsFolder[0]})}
	  }
	}
	stage('copy-publish-to-x:') {
	  steps {
	    bat "mkdir \"${indexerArtifactsFolder[1]}\" "
	    //bat "xcopy  /y /v /e ${env.WORKSPACE}\\Indexer\\bin\\Release\\PublishOutput\\* \"${indexerArtifactsFolder[1]}\" "
		script{copyPublishFiles($indexerPublishOutputDir,indexerArtifactsFolder[1])}
	  }
	}
	stage('copy-Dockerfile-to-x:') {
	  steps {
	    //bat "xcopy /y /v ${env.WORKSPACE}\\Indexer\\Dockerfile ${indexerArtifactsFolder[0]}"
		script{copyPublishFiles($docker_file_path, indexerArtifactsFolder[0])}
	  }
	}
	stage('copy-artifacts-to-last-build') {
	  steps {
		script {
		  copyPublishFiles("${indexerArtifactsFolder[0]}\\$installer_name",indexerArtifactsFolder[2])
		  copyPublishFiles("${indexerArtifactsFolder[1]}\\*","${indexerArtifactsFolder[2]}\\PublishOutput")
		}
	  }
	}
    stage('generate-code-coverage-report-for-unit-tests'){
      steps {
        script {
          cobertura autoUpdateHealth: false, 
          autoUpdateStability: false, 
          coberturaReportFile: "%WORKSPACE%\\IndexerUnitTest\\cobertura_results.xml", 
          conditionalCoverageTargets: '70, 0, 0', 
          failUnhealthy: false, 
          failUnstable: false, 
          lineCoverageTargets: '80, 0, 0', 
          maxNumberOfBuilds: 0, 
          methodCoverageTargets: '80, 0, 0', 
          onlyStable: false, 
          sourceEncoding: 'ASCII', 
          zoomCoverageChart: false
        }
      }
    }
    stage('generate-code-coverage-report-for-full-tests'){
      steps {
        script {
          cobertura autoUpdateHealth: false, 
          autoUpdateStability: false, 
          coberturaReportFile: "%WORKSPACE%\\IndexerFullTest\\cobertura_results.xml", 
          conditionalCoverageTargets: '70, 0, 0', 
          failUnhealthy: false, 
          failUnstable: false, 
          lineCoverageTargets: '80, 0, 0', 
          maxNumberOfBuilds: 0, 
          methodCoverageTargets: '80, 0, 0', 
          onlyStable: false, 
          sourceEncoding: 'ASCII', 
          zoomCoverageChart: false
        }
      }
    }
    stage('stash-artifacts') {
      steps {
        stash includes: "Indexer/bin/release/PublishOutput/**/*", name: publish_artifacts_stash_id
		stash includes: "Indexer/Dockerfile", name: dockerfile_artifacts_stash_id
      }
    }

    stage('clean-test-workspace') {
      steps {
        node(linux_not_within_docker_node_label) {
          ws("%WORKSPACE") {
            script {
              linux_not_within_docker_node_name = NODE_NAME
            }
            step([$class: 'WsCleanup'])
          }
        }
      }
    } 
    stage('unstash-artifacts') {
      steps {
        node(linux_not_within_docker_node_name) {
          ws("%WORKSPACE") {
            unstash publish_artifacts_stash_id
			unstash dockerfile_artifacts_stash_id
          }
        }
      }
    }
    stage('docker-build') {
      steps {
        node(linux_not_within_docker_node_name) {
          ws("%WORKSPACE") {
		    script{
              newImage = docker.build("$docker_registry_tag", "./Indexer/")
			  newImage.push()
			}
          }
        }
      }
    }
  }
  post {
    always {
      dir (unittest_indexer_dir) {
        step([
          $class: 'XUnitBuilder', testTimeMargin: '3000', thresholdMode: 1,
          thresholds: [
              [$class: 'FailedThreshold', failureNewThreshold: '', failureThreshold: '0', unstableNewThreshold: '', unstableThreshold: ''],
              [$class: 'SkippedThreshold', failureNewThreshold: '', failureThreshold: '', unstableNewThreshold: '', unstableThreshold: '']
          ],
          tools: [[
              $class: 'XUnitDotNetTestType',
              deleteOutputFiles: true,
              failIfNotNew: true,
              pattern: unittest_indexer_outfile,
              skipNoTestFiles: false,
              stopProcessingIfError: true
          ]]
        ])
      }
      dir (fulltest_indexer_dir) {
        step([
          $class: 'XUnitBuilder', testTimeMargin: '3000', thresholdMode: 1,
          thresholds: [
              [$class: 'FailedThreshold', failureNewThreshold: '', failureThreshold: '0', unstableNewThreshold: '', unstableThreshold: ''],
              [$class: 'SkippedThreshold', failureNewThreshold: '', failureThreshold: '', unstableNewThreshold: '', unstableThreshold: '']
          ],
          tools: [[
              $class: 'XUnitDotNetTestType',
              deleteOutputFiles: true,
              failIfNotNew: true,
              pattern: fulltest_indexer_outfile,
              skipNoTestFiles: false,
              stopProcessingIfError: true
          ]]
        ])
      }
    }
  }
}