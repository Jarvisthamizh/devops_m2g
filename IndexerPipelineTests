// --------------------------------------
//
// global reusable definitions
//
// --------------------------------------
def job_workspace					= "C:\\Jenkins\\workspace\\%JOB_NAME%\\"
def source_folder_of_publish		= "$job_workspace\\Indexer\\bin\\release\\PublishOutputpublish"
def dest_folder_of_publish			= "$job_workspace\\Indexer\\bin\\release\\PublishOutput"
def msbuild          				= { configuration -> bat "\"${tool 'msbuildWinWorker2'}\" Indexer.sln /m /t:rebuild /p:Configuration=$configuration /p:Platform=\"Any CPU\" /p:ProductVersion=1.0.0.${env.BUILD_NUMBER}" }
def restore							= { configuration -> bat "\"${tool 'msbuildWinWorker2'}\" Indexer.sln /p:Configuration=$configuration /m /t:restore"}
def publish							= { configuration -> bat "\"${tool 'msbuildWinWorker2'}\" Indexer.sln /m /p:OutputPath=bin\\$configuration\\PublishOutput /t:publish /p:Configuration=$configuration /p:Platform=\"Any CPU\"  "}
def copy							= { srcpath,dstpath -> bat "xcopy /y /v /e job_workspace job_workspace\Aviv"}
def unittestsdir     				= 'projects\\XUnitTestProject1'
def unittestOutFile  				= 'xunit.out.xml'
theworkspace                        = "workspace/${env.JOB_NAME}"
linux_production_like_node_label    = 'linux-production-like-2'
linux_production_like_node_name     = linux_production_like_node_label
publish_artifacts_stash_id          = 'publish-artifacts'
dockerfile_artifacts_stash_id_2		= 'dockerfile-artifacts'

/*
--------------------------------------

			the pipeline 

--------------------------------------
*/

pipeline { 
  agent {
    node {
      label 'builder-WN2012R2-1'
    }
  }
  
  options {
    skipDefaultCheckout true
    timeout(time: 30, unit: 'HOURS') 
    timestamps()
  }
  
  triggers { pollSCM('*/1 * * * *') }
  
  stages { 
    stage('clean workspace') {
      steps {
        step([$class: 'WsCleanup'])
      }
    }
    stage('clone repo') {
      steps {
        checkout scm
      }
    }
    stage('restore-packages') { 
       steps {
		script {
		  restore "release"
		  }
		}
    }
    stage('run-unit-tests-and-code-coverage') {
      steps {
        script {
          run_opencover_managed_only()
        }
      }
    }
	stage('publish') {
	  steps {
	    script {
		  publish "release"
		}
	  }	  
	}
	stage('copy-publish-of-indexer') {
	  steps {
	    //Copy publish files of indexer project
		//bat 'xcopy /y /v /e "C:\\Jenkins\\workspace\\%JOB_NAME%\\Indexer\\bin\\release\\PublishOutputpublish" "C:\\Jenkins\\workspace\\%JOB_NAME%\\Indexer\\bin\\release\\PublishOutput"'
		copy "Indexer\\bin\\release\\PublishOutputpublish","Indexer\\bin\\release\\PublishOutput"
		//Copy publish files of ConfigIndexerHost project
		bat 'xcopy /y /v /e "C:\\Jenkins\\workspace\\%JOB_NAME%\\ConfigIndexerHost\\bin\\release\\PublishOutputpublish" "C:\\Jenkins\\workspace\\%JOB_NAME%\\ConfigIndexerHost\\bin\\release\\PublishOutput"'
		//Copy publish files of IndexerUnitTest project
		bat 'xcopy /y /v /e "C:\\Jenkins\\workspace\\%JOB_NAME%\\IndexerUnitTest\\bin\\release\\PublishOutputpublish" "C:\\Jenkins\\workspace\\%JOB_NAME%\\IndexerUnitTest\\bin\\release\\PublishOutput"'
	  }	  
	}
	stage('delete-extra-publish-in-workspace') {
	  steps {
		  bat 'del /q "C:\\Jenkins\\workspace\\%JOB_NAME%\\Indexer\\bin\\release\\PublishOutputpublish"'
		  bat 'rmdir /q /s "C:\\Jenkins\\workspace\\%JOB_NAME%\\Indexer\\bin\\release\\PublishOutputpublish"'
		  bat 'del /q "C:\\Jenkins\\workspace\\%JOB_NAME%\\ConfigIndexerHost\\bin\\release\\PublishOutputpublish"'
		  bat 'rmdir /q /s "C:\\Jenkins\\workspace\\%JOB_NAME%\\ConfigIndexerHost\\bin\\release\\PublishOutputpublish"'
		  bat 'del /q "C:\\Jenkins\\workspace\\%JOB_NAME%\\IndexerUnitTest\\bin\\release\\PublishOutputpublish"'
		  bat 'rmdir /q /s "C:\\Jenkins\\workspace\\%JOB_NAME%\\IndexerUnitTest\\bin\\release\\PublishOutputpublish"'
	  }	  
	}
	stage('copy-installer-to-x:') {
	  steps {
	    bat '"C:\\Program Files (x86)\\NSIS\\makensis.exe" C:\\Jenkins\\workspace\\%JOB_NAME%\\Installer\\indexerInstallerScript.nsi'
	    bat 'mkdir "X:\\software\\Microservices\\Indexer\\akabesatest\\Build-%BUILD_NUMBER%\\"'
	    bat 'copy "C:\\Jenkins\\workspace\\%JOB_NAME%\\Installer\\Indexer-1.0.0.0-Installer.exe" "X:\\software\\Microservices\\Indexer\\akabesatest\\Build-%BUILD_NUMBER%\\"'
	  }	  
	}
	stage('copy-publish-to-x:') {
	  steps {
	    bat 'mkdir "X:\\software\\Microservices\\Indexer\\akabesatest\\Build-%BUILD_NUMBER%\\PublishOutput"'
	    bat 'xcopy  /y /v /e "C:\\Jenkins\\workspace\\%JOB_NAME%\\Indexer\\bin\\Release\\PublishOutput\\*" "X:\\software\\Microservices\\Indexer\\akabesatest\\Build-%BUILD_NUMBER%\\PublishOutput"'
	  }
	}
	stage('copy-Dockerfile-to-x:') {
	  steps {
	    bat 'xcopy /y /v ".\\indexer\\Dockerfile" "X:\\software\\Microservices\\Indexer\\akabesatest\\Build-%BUILD_NUMBER%"'
	  }
	}
	stage('copy-artifacts-to-last-build') {
	  steps {
	    bat 'xcopy /y /v "X:\\software\\Microservices\\Indexer\\akabesatest\\Build-%BUILD_NUMBER%\\Indexer-1.0.0.0-Installer.exe" "X:\\software\\Microservices\\Indexer\\akabesatest\\last-build"'
		bat 'xcopy /y /v /e "X:\\software\\Microservices\\Indexer\\akabesatest\\Build-%BUILD_NUMBER%\\PublishOutput\\*" "X:\\software\\Microservices\\Indexer\\akabesatest\\last-build\\PublishOutput"'
	  }
	}
    stage('generate-code-coverage-report'){
      steps {
        script {
          cobertura autoUpdateHealth: false, 
          autoUpdateStability: false, 
          coberturaReportFile: "$cobertura_outfile", 
          conditionalCoverageTargets: '70, 0, 0', 
          failUnhealthy: false, 
          failUnstable: false, 
          lineCoverageTargets: '80, 0, 0', 
          maxNumberOfBuilds: 0, 
          methodCoverageTargets: '80, 0, 0', 
          onlyStable: false, 
          sourceEncoding: 'ASCII', 
          zoomCoverageChart: false
        }
      }
    }
    stage('stash-artifacts') {
      steps {
        stash includes: "Indexer/bin/release/PublishOutput/**/*", name: publish_artifacts_stash_id
		stash includes: "Indexer/Dockerfile", name: dockerfile_artifacts_stash_id_2
      }
    }

    stage('clean-test-workspace') {
      steps {
        node(linux_production_like_node_label) {
          ws(theworkspace) {
            script {
              linux_production_like_node_name = NODE_NAME
            }
            step([$class: 'WsCleanup'])
          }
        }
      }
    } 
    stage('unstash-artifacts') {
      steps {
        node(linux_production_like_node_name) {
          ws(theworkspace) {
            unstash publish_artifacts_stash_id
			unstash dockerfile_artifacts_stash_id_2
          }
        }
      }
    }
    stage('docker-build') {
      steps {
        node(linux_production_like_node_name) {
          ws(theworkspace) {
		    script{
              newImage = docker.build("tlv-docker.us.int.genesyslab.com:5000/indexertest:${env.BUILD_NUMBER}", "./Indexer/")
			  newImage.push()
			}
          }
        }
      }
    }
  }
}